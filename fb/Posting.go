// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Posting struct {
	_tab flatbuffers.Table
}

func GetRootAsPosting(buf []byte, offset flatbuffers.UOffsetT) *Posting {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Posting{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Posting) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Posting) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Posting) Uid() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Posting) MutateUid(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Posting) Value(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Posting) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Posting) ValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Posting) MutateValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Posting) ValueType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Posting) MutateValueType(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Posting) PostingType() PostingType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return PostingType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Posting) MutatePostingType(n PostingType) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func (rcv *Posting) LangTag(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Posting) LangTagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Posting) LangTagBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Posting) MutateLangTag(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Posting) Label() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Posting) Facets(obj *Facet, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Posting) FacetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Posting) Op() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Posting) MutateOp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *Posting) StartTs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Posting) MutateStartTs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *Posting) CommitTs() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Posting) MutateCommitTs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

func PostingStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func PostingAddUid(builder *flatbuffers.Builder, uid uint64) {
	builder.PrependUint64Slot(0, uid, 0)
}
func PostingAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func PostingStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PostingAddValueType(builder *flatbuffers.Builder, valueType int32) {
	builder.PrependInt32Slot(2, valueType, 0)
}
func PostingAddPostingType(builder *flatbuffers.Builder, postingType PostingType) {
	builder.PrependInt32Slot(3, int32(postingType), 0)
}
func PostingAddLangTag(builder *flatbuffers.Builder, langTag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(langTag), 0)
}
func PostingStartLangTagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PostingAddLabel(builder *flatbuffers.Builder, label flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(label), 0)
}
func PostingAddFacets(builder *flatbuffers.Builder, facets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(facets), 0)
}
func PostingStartFacetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PostingAddOp(builder *flatbuffers.Builder, op uint32) {
	builder.PrependUint32Slot(7, op, 0)
}
func PostingAddStartTs(builder *flatbuffers.Builder, startTs uint64) {
	builder.PrependUint64Slot(8, startTs, 0)
}
func PostingAddCommitTs(builder *flatbuffers.Builder, commitTs uint64) {
	builder.PrependUint64Slot(9, commitTs, 0)
}
func PostingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
